# Lexical Grammar
digit = ? 0-9 ?
utf8 = ? . ?
hex = ? [A-Fa-f0-9] ?

identifier = ? [A-z_][A-z0-9_]+ ?
comment = ? #.*\n ?


# Syntactical Grammar
multiline_comment = '#[' ( utf8 | multiline_comment )* ']'

unicode_escape = '\u' hex+
hex_escape = '\x' hex+
bin_escape = '\b' ( '0' | '1' )+
escapes = '\n' | '\t' | '\r' | '\v' | '\f' | '\b' | '\'' | '\"' | '\\' | unicode_escape | hex_escape | bin_escape

hex_literal = '0x' hex+
bin_literal = '0b' ( '0' | '1' )+
integer_literal = ( digit | '_' )+
float_literal = ( digit | '_' ) [ '.' ( digit | '_' )* ] 'f';
string_literal = '"' ( escapes | utf8 )* '"'
char_literal = [ "utf8" | "utf16" | "utf32" ] "'" utf8 "'"

number_literal = integer_literal | float_literal | hex_literal | bin_literal
literal = number_literal | string_literal | unicode_literal | char_literal


# Types
array_type = '[' integer_literal ( ',' integer_literal )* ']' type
pointer_type = '^'+ type
fn_type = 'fn' '(' type ( ',' type )* ')' [ type ]

type = array_type | pointer_type | fn_type | identifier


# Statements
declaration = identifier ( ',' identifier )* ':' [ type ] [ '=' expr ]
assignment = identifier '=' ( identifier | literal )

sum_entry = identifier [ '(' type ')' ]
sum = 'sum' identifier '{' sum_entry ( ',' sum_entry )* [ ',' ] '}'

enum_entry = identifier [ '=' literal ]
enum = 'enum' '{' enum_entry ( ',' enum_entry )* [ ',' ] '}'

function = 'fn' identifier '(' declaration ( ',' declaration )* ')' [ type ] block

for = 'for' identifier [':' type] '=' expr ',' expr [',' expr] block
while = 'while' expr block


# Expressions
type_compare = identifier 'is' ( [ '.' ] type )
cast = identifier 'as' ( [ '.' ] type )

call = identifier '(' expr ( ',' expr )* ')' ';'

if = 'if' expr block [ 'else' block ]

match = 'match' expr '{' match_case* '}'
match_case = ( ( '.' identifier [ '@' identifier ] ) | ( identifier | literal ) | '*' ) block


# Misc
expr = match | if | call | cast | type_compare | math
statement = ( for | while ) | ( ( declaration | expr | assignment ) ';' )
block = '{' statement* [ expr ] '}'


program = ( function | sum | enum | multiline_comment )*
